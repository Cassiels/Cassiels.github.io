<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有个帅哥不小心</title>
  
  <subtitle>别赶不上野心，又辜负了努力！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-12T09:52:11.744Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cassiel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue介绍</title>
    <link href="http://yoursite.com/2018/06/12/article2/"/>
    <id>http://yoursite.com/2018/06/12/article2/</id>
    <published>2018-06-12T09:51:37.749Z</published>
    <updated>2018-06-12T09:52:11.744Z</updated>
    
    <content type="html"><![CDATA[<!-- ![](/images/timg.jpg) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>vue是一套构建用户界面的渐进式框架。我对渐进式框架的理解是，你可以充分的使用vue的功能，包括简单的功能和复杂的功能，完全按照vue的模式去构建程序。当然你也可以只使用类似数据响应的单一功能。他不强制要求你按照某个模式去书写，也就是说你可以在原有的代码基础上将少量功能用vue去实现也是可行的。<br>最喜欢的vue的两个特点是，响应式数据和组件。响应式数据省去了很多监听数据的代码，可以专注在构建界面上。而组件作为模块化思想下延伸出的一个手段，不仅可以很好的进行解耦使组件独立存在便于管理，而且可以很好的配合模块化技术进行模块化开发。ES6已经支持模块化。<a id="more"></a></p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- ![](/images/timg.jpg) --&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;vue是一套构建用户界面的渐进式框架。我对渐进式框架的理解是，你可以充分的使用vue的功能，包括简单的功能和复杂的功能，完全按照vue的模式去构建程序。当然你也可以只使用类似数据响应的单一功能。他不强制要求你按照某个模式去书写，也就是说你可以在原有的代码基础上将少量功能用vue去实现也是可行的。&lt;br&gt;最喜欢的vue的两个特点是，响应式数据和组件。响应式数据省去了很多监听数据的代码，可以专注在构建界面上。而组件作为模块化思想下延伸出的一个手段，不仅可以很好的进行解耦使组件独立存在便于管理，而且可以很好的配合模块化技术进行模块化开发。ES6已经支持模块化。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue介绍</title>
    <link href="http://yoursite.com/2018/06/08/article1/"/>
    <id>http://yoursite.com/2018/06/08/article1/</id>
    <published>2018-06-08T02:44:20.473Z</published>
    <updated>2018-06-12T09:46:57.319Z</updated>
    
    <content type="html"><![CDATA[<!-- ![](/images/timg.jpg) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>vue是一套构建用户界面的渐进式框架。我对渐进式框架的理解是，你可以充分的使用vue的功能，包括简单的功能和复杂的功能，完全按照vue的模式去构建程序。当然你也可以只使用类似数据响应的单一功能。他不强制要求你按照某个模式去书写，也就是说你可以在原有的代码基础上将少量功能用vue去实现也是可行的。<br>最喜欢的vue的两个特点是，响应式数据和组件。响应式数据省去了很多监听数据的代码，可以专注在构建界面上。而组件作为模块化思想下延伸出的一个手段，不仅可以很好的进行解耦使组件独立存在便于管理，而且可以很好的配合模块化技术进行模块化开发。ES6已经支持模块化。<a id="more"></a></p></blockquote><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- ![](/images/timg.jpg) --&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;vue是一套构建用户界面的渐进式框架。我对渐进式框架的理解是，你可以充分的使用vue的功能，包括简单的功能和复杂的功能，完全按照vue的模式去构建程序。当然你也可以只使用类似数据响应的单一功能。他不强制要求你按照某个模式去书写，也就是说你可以在原有的代码基础上将少量功能用vue去实现也是可行的。&lt;br&gt;最喜欢的vue的两个特点是，响应式数据和组件。响应式数据省去了很多监听数据的代码，可以专注在构建界面上。而组件作为模块化思想下延伸出的一个手段，不仅可以很好的进行解耦使组件独立存在便于管理，而且可以很好的配合模块化技术进行模块化开发。ES6已经支持模块化。
    
    </summary>
    
    
  </entry>
  
</feed>
